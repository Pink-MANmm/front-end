1.什么是自定义事件
在封装组件时，为了让组件的使用者可以监听到组件内状态的变化，此时需要用到组件的自定义事件

2.自定义事件的3个使用步骤
在封装组件时：
①声明自定义事件
②触发自定义事件
在使用组件时：
③监听自定义事件

3.声明自定义事件
开发者为自定义组件封装的自定义事件，必须事先在emits节点中声明，示例代码如下：
<template>
    <h3>Counter组件</h3>
    <button>+1</button>
</template>

<script>
export default{
    //my-counter组件的自定义事件，必须事先声明到emits节点中
    emits:['change']
}
</script>

4.触发自定义事件
在emits节点下生命的自定义事件，可以通过this.$emit('自定义事件的名称')方法进行触发，示例代码如下：
<template>
    <h3>Counter组件</h3>
    <button @click="onBtnClick">+1</button>
</template>

<script>
export default{
    emits:['change'],
    methods:{
        onBtnClick(){
            this.$emit('change')//当点击+1按钮时，调用this.$emit()方法，触发自定义的change事件
        }
    }
}
</script>

5.监听自定义事件
在使用自定义的组件时，可以通过v-on的形式监听自定义事件。示例代码如下：
<!-- 使用v-on指令绑定事件监听 -->
<my-counter @change="getCount"></my-counter>

methods:{
    getCount(){
        console.log('监听到了count值的变化！')
    }
}

6.自定义事件传参
在调用this.$emit()方法触发自定义事件时，可以通过第2个参数为自定义事件传参，示例代码如下：
<template>
    <h3>Counter组件</h3>
    <button @click="onBtnClick">+1</button>
</template>

<script>
export default{
    emits:['change'],
    methods:{
        onBtnClick(){
            this.$emit('change',this.count)//触发自定义事件时，通过第二个参数传参
        }
    }
}
</script>