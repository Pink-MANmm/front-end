1.路由重定向
路由重定向指的是：用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面。
通过路由规则的redirect属性，指定一个新的路由地址，可以很方便地设置路由的重定向：
const router=new VueRouter({
    //在routes数组中，声明路由的匹配规则
    routes:[
        //当用户访问 / 的时候，通过redirect属性跳转到 /home 对应的路由规则
        {path:'/',redirect:'/home'},
        {path:'/home',component:Home},
        {path:'/movie',component:Movie},
        {path:'/about',component:About}
    ]
})

2.嵌套路由
通过路由实现组件的嵌套展示，叫做嵌套路由。
*点击父级路由链接显示模板内容
*①模板内容中又有子级路由链接②点击子级路由链接显示子级模板内容

3.通过children属性声明子路由规则
在src/router/index.js路由模块中，导入需要的组件，并使用children属性声明子路由规则
import Tab1 from '@/components/tabs/Tab1.vue'
import Tab1 from '@/components/tabs/Tab2.vue'

const router=new VueRouter({
    routes:[
        {//about页面的路由规则（父级路由规则）
            path:'/about',
            component:About,
            children:[//1.通过children属性，嵌套声明子级路由规则
                {path:'tab1',component:Tab1},
                {path:'tab2',component:Tab2}
            ]
        }
    ]
})

4.动态路由匹配
思考：有如下3个路由链接
<router-link to="/movie/1">电影1</router-link>
<router-link to="/movie/2">电影2</router-link>
<router-link to="/movie/3">电影3</router-link>
定义如下3个路由规则，是否可行？？？
{path:'/movie/1',component:Movie}
{path:'/movie/2',component:Movie}
{path:'/movie/3',component:Movie}
缺点：路由规则的复用性差

4.1动态路由的规则
动态路由指的是：把Hash地址中可变的部分定义为参数项，从而提高路由规则的复用性。在vue-router中使用英文的冒号（:）来定义路由的参数项。示例代码如下：
//路由中的动态参数以 : 进行声明，冒号后面的是动态参数的名称
{path:'/movie/:id',component:Movie}

//将以下3个路由规则，合并成了一个，提高了路由规则的复用性
{path:'/movie/1',component:Movie}
{path:'/movie/2',component:Movie}
{path:'/movie/3',component:Movie}

5.声明式导航&编程式导航
在浏览器中，点击链接实现导航的方式，叫做声明式导航。例如：
*普通网页中点击<a>链接、vue项目中点击<router-link>都属于声明式导航

在浏览器中，调用API方法实现导航的方式，叫做编程式导航（this必须省略，否则会报错）
*普通页面中调用location.href跳转到新页面的方式，属于编程式导航

5.1vue-router中的编程式导航API
vue-router提供了许多编程式导航的API，其中最常用的导航API分别是：
①this.$router.push('hash地址')
*跳转到指定hash地址，并增加一条历史记录
②this.$router.replace('hash地址')
*跳转到指定的hash地址，并替换掉当前的历史记录
③this.$router.go(数值n)

5.2$router.go
调用this.$router.go()方法，可以在浏览历史中前进和后退。示例代码如下：
<template>
    <h3>MyMovie组件 --- {{id}}</h3>
    <button @click="goBack">后退</button>
</template>

<script>
export default{
    props:['id'],
    methods:{
        goBack(){ this.$router.go(-1) }//后退到之前的组件页面
    }
}
</script>

5.3$router.go的简化用法
在实际开发中，一般只会前进和后退一层页面。因此vue-router提供了如下两个便捷方法：
①$router.back()
*在历史记录中，后退到上一个页面
②$router.forward()
*在历史记录中，前进到下一个页面

6.导航守卫
导航守卫可以控制路由的访问权限。示意图如下：
<router-link to='/main'>主页</router-link>                        -----------》                        Main后台主页 
                Home首页                           无法控制访问权限，用户可以直接访问后台主页          
        未登陆的情况下，访问后台主页

<router-link to='/main'>主页</router-link>                                             ----X--->       Main后台主页
                Home首页                           -----------------》导航守卫          -------->      Login登录页面
        未登录的情况下，访问后台主页                        检测到未登录，强制跳转到登录页

6.1全局前置守卫
每次发生路由的导航跳转时，都会触发全局前置守卫。因此，在全局前置守卫中，程序员可以对每个路由进行访问权限的控制：
//创建路由实例对象
const router = new VueRouter({ ... })

//调用路由实例对象的beforeEach方法，即可声明"全局前置守卫"
//每次发生路由导航跳转的时候，都会自动触发fn这个"回调函数"
router.beforeEach(fn)

6.2守卫方法的3个形参
全局前置守卫的回调函数中接收3个形参，格式为：
//创建路由实例对象
const router = new VueRouter({ ... })

//全局前置守卫
router.beforeEach((to,from,next) => {
    //to是将要访问的路由的信息对象
    //from是将要离开的路由的信息对象
    //next是一个函数，调用next()表示放行，允许这次路由导航
})

6.3next函数的3种调用方式
参考示意图，分析next函数的3种调用方式最终导致的结果：

<router-link to='/main'></router-link>  --->导航守卫 ---------next()---------->  Main后台主页
                Home上首页    <---next(false)---     -----next('/login')------>  Login登录页面

当前用户拥有后台主页的访问权限，直接放行：next()
当前用户没有后台主页的访问权限，强制其跳转到登录页面：next('/login')
当前用户没有后台主页的访问权限，不允许跳转到后台主页：next(false)

6.4控制后台主页的访问权限
router.beforeEach((to,from,next)=>{
    if(to.path==='/main'){
        const token=localStorage.getItem('token')
        if(token){
            next()//访问的是后台主页，且有token的值
        }else{
            next('/login')//访问的是后台主页，但是没有token的值
        }
    }else{
        next()//访问的不是后台主页，直接放行
    }
})