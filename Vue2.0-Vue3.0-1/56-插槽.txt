1.什么是插槽
插槽(Slot)是vue为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽

--App.vue
<!-- 默认情况下，在使用组件的时候，提供的内容都会被填充到名字为default的插槽之中 -->
<!-- 1.如果要把内容填充到指定名称的插槽中，需要使用v-slot：这个指令 -->
<!-- 2.v-slot：后面要跟上插槽的名字 -->
<!-- 3.v-slot：指令不能直接用在元素身上，必须用在template标签上 -->
<!-- 4.template这个标签，它是一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为任何实质性的html元素 -->
<!-- 5.v-slot:可以简写为# -->
<Left>
    <template v-slot:default>
        <p>这是在Left组件的内容区域，声明的p标签</p>
    </template>
</Left>

--Left.vue
<!-- 声明一个插槽区域 -->
<!-- vue官方规定：每一个slot插槽，都要有一个name名称 -->
<!-- 如果省略了slot的name属性，则有一个默认名称叫做default -->
<slot name="default">
    <h6>这是default插槽的默认内容</h6>
、</slot>

2.后备内容
封装组件时，可以为预留的<slot>插槽提供后背内容（默认内容）。如果组件的使用者没有为插件提供任何内容，则后备内容会生效。示例代码如下：
<slot name="default">
    <h6>这是default插槽的默认内容</h6>
</slot>

3.具名插槽
name非default的插槽为具名插槽，name为default的插槽为默认插槽

4.作用域插槽
--App.vue
<Article>
    <template #content="scope">
        <div>
            <p>{{ scope.msg }}</p>
        </div>
    </template>
</Article>

--Article.vue
<!-- 在封装组件时，为预留的<slot>提供属性对应的值，这种用法，叫做"作用域(scope)插槽" -->
<slot name="content" msg="hello vue.js"></slot>

5.作用域插槽的解构赋值
--App.vue
<Article>
    <template #content="{ msg, user }">
        <div>
            <p>{{ msg }}</p>
            <p>{{ user.name }}</p>
        </div>
    </template>
</Article>

--Article.vue
<slot name="content" msg="hello vue.js" :user="userInfo"></slot>
