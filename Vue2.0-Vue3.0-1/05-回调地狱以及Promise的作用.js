//1.回调地狱
//多层回调函数的相互嵌套，就形成了回调地狱。示例代码如下：
setTimeout(() => {//第1层回调函数
    console.log('延时1秒后输出');
    setTimeout(() => {//第2层回调函数
        console.log('再延时2秒后输出');
        setTimeout(() => {//第3层回调函数
            console.log('再延时3秒后输出');
        }, 3000)
    }, 2000)
}, 1000)
//回调地狱的缺点：
//*代码耦合性太强，牵一发而动全身，难以维护
//*大量冗余的代码相互嵌套，代码的可读性变差

//2.如何解决回调地狱的问题
//为了解决回调地狱的问题，ES6（ECMAScript2015）中新增了Promise的概念

